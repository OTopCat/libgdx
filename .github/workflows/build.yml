name: SonarQube Desktop-only

on:
  push:
    branches: [ master ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build-and-analyze-desktop:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      # --- Create a dummy android-tests project so root build.gradle references resolve ---
      - name: Create dummy android tests project
        run: |
          mkdir -p ci-dummy/tests/gdx-tests-android/src/main/java
          cat > ci-dummy/tests/gdx-tests-android/build.gradle <<'EOF'
          plugins { id 'java-library' }
          java {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
          }
          // no sources; this is just a stub so root build can reference the project
          EOF

      # --- Desktop-only settings: include desktop modules + map the dummy android tests project ---
      # Adjust the includes to match the desktop modules you actually want to build.
      - name: Create desktop-only settings
        run: |
          cat > settings-ci.gradle.kts <<'EOF'
          rootProject.name = "libgdx-desktop-ci"

          // Desktop/Java modules you want to analyze:
          include(":gdx")
          include(":backends:gdx-backend-lwjgl3")
          // add any other non-Android modules here, e.g.:
          // include(":extensions:gdx-tools")

          // Add a dummy replacement for the Android tests project so references don't fail
          include(":tests:gdx-tests-android")
          project(":tests:gdx-tests-android").projectDir = file("ci-dummy/tests/gdx-tests-android")
          EOF

      - name: Make Gradle executable
        run: chmod +x gradlew

      # Build only the projects listed in settings-ci.gradle.kts
      - name: Build desktop
        run: ./gradlew -c settings-ci.gradle.kts build --warning-mode all --info

      - name: SonarQube analyze (desktop-only)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # If using self-hosted SonarQube, add SONAR_HOST_URL as a repo secret
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew -c settings-ci.gradle.kts sonar \
            -Dsonar.login=${SONAR_TOKEN} \
            ${{ secrets.SONAR_HOST_URL && format('-Dsonar.host.url={0}', secrets.SONAR_HOST_URL) || '' }}
