/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
buildscript {
	apply from: "gradle/dependencies.gradle"

	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath "com.diffplug.spotless:spotless-plugin-gradle:${versions.spotless}"
		classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2"
		classpath 'org.jreleaser:jreleaser-gradle-plugin:1.18.0'
	}
}

plugins {
	id "de.undercouch.download" version "5.0.1"
}

plugins {
	id "org.sonarqube" version "7.0.0.6105"
}

sonar {
	properties {
		property "sonar.projectKey", "OTopCat_libgdx"
		property "sonar.organization", "otopcat"
	}
}
apply from: "gradle/dependencies.gradle"

ext {
	isReleaseBuild = {
		return project.hasProperty("RELEASE")
	}

	getSnapshotRepositoryUrl = {
		return project.hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
				: "https://central.sonatype.com/repository/maven-snapshots/"
	}

	getRepositoryUsername = {
		return project.hasProperty('MAVEN_USERNAME') ? MAVEN_USERNAME : ""
	}

	getRepositoryPassword = {
		return project.hasProperty('MAVEN_PASSWORD') ? MAVEN_PASSWORD : ""
	}
}

allprojects {
	group = 'com.badlogicgames.gdx'
	version = project.getProperty('version') + (isReleaseBuild() ? "" : "-SNAPSHOT")

	buildscript {
		repositories {
			google()
			mavenLocal()
			mavenCentral()
			gradlePluginPortal()
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
			maven { url "https://oss.sonatype.org/content/repositories/releases/" }
			maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
		}
	}

	repositories {
		google()
		mavenLocal()
		mavenCentral()
		gradlePluginPortal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}
	tasks.withType(Javadoc) {
		options.encoding = 'UTF-8'
		options.addBooleanOption('use', true);
	}
	tasks.withType(Test) {
		systemProperty 'file.encoding', 'UTF-8'
	}

	if (JavaVersion.current().isJava8Compatible()) {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none,-missing', '-quiet')
		}
	}

	if (JavaVersion.current().isJava9Compatible()) {
		tasks.withType(Javadoc) {
			options.addStringOption("-release", "8");
		}
	}

	apply plugin: "com.diffplug.spotless"

	spotless {
		lineEndings 'UNIX'

		java {
			target 'src/**/*.java', 'test/**/*.java', 'generator/**/*.java'
			removeUnusedImports()
			eclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}
		groovyGradle {
			target '*.gradle'
			greclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}
	}
}

// Configure all Java subprojects except the Android ones (if they exist)
configure(subprojects.findAll { it.path !in [":tests:gdx-tests-android", ":backends:gdx-backend-android"] }) {
  apply plugin: "java-library"

  compileJava {
    options.fork = true
    options.incremental = true
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }
}

// Apply IDE config to most projects but skip large aggregates / special cases
// Collect only projects that actually exist in THIS build.
// Add/remove paths as you like â€” missing ones are filtered out safely.
def publishPaths = [
    ":gdx",
    ":backends:gdx-backend-android",
    ":backends:gdx-backend-headless",
    ":backends:gdx-backend-lwjgl",
    ":backends:gdx-backend-lwjgl3",
    ":backends:gdx-backend-robovm",
    ":backends:gdx-backend-robovm-metalangle",
    ":backends:gdx-backend-gwt",
    ":extensions:gdx-box2d-parent",
    ":extensions:gdx-box2d-parent:gdx-box2d",
    ":extensions:gdx-box2d-parent:gdx-box2d-gwt",
    ":extensions:gdx-bullet",
    ":extensions:gdx-freetype",
    ":extensions:gdx-lwjgl3-angle",
    ":extensions:gdx-tools"
]

def publishProjects = publishPaths
        .collect { path -> findProject(path) }   // returns null if not included
        .findAll { it != null }                  // keep only present projects

configure(publishProjects) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    afterEvaluate { project ->
        // Workaround: ensure components are populated
        afterEvaluate {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        // Standard Java publications (desktop modules)
                        if (components.findByName("java") != null) {
                            from components.java
                        }
                        // Android (if ever included in a non-desktop build)
                        if (components.findByName("release") != null) {
                            from components.release
                        }
                        pom {
                            name = POM_NAME
                            if (!POM_DESCRIPTION.isEmpty()) description = POM_DESCRIPTION
                            url = POM_URL
                            licenses {
                                license {
                                    name = POM_LICENCE_NAME
                                    url = POM_LICENCE_URL
                                    distribution = POM_LICENCE_DIST
                                }
                            }
                            developers {
                                developer {
                                    id = "libGDX Developers"
                                    url = "https://github.com/libgdx/libgdx/graphs/contributors"
                                }
                            }
                            scm {
                                connection = POM_SCM_CONNECTION
                                developerConnection = POM_SCM_DEV_CONNECTION
                                url = POM_SCM_URL
                            }
                        }
                    }

                    // Natives (if jnigen tasks exist)
                    if (project.tasks.findByName('jnigen')) {
                        mavenPlatform(MavenPublication) {
                            artifactId = artifactId + "-platform"
                            if (project.tasks.findByName('jnigenJarNativesDesktop'))
                                artifact jnigenJarNativesDesktop { }

                            ['arm64-v8a','armeabi-v7a','x86_64','x86'].each { id ->
                                def t = "jnigenJarNativesAndroid${id}"
                                if (project.tasks.findByName(t)) artifact(t) { }
                            }

                            if (project.tasks.findByName('jnigenJarNativesIOS'))
                                artifact jnigenJarNativesIOS { }

                            pom {
                                name = POM_NAME + " Native Libraries"
                                if (!POM_DESCRIPTION.isEmpty()) description = POM_DESCRIPTION
                                url = POM_URL
                                licenses {
                                    license {
                                        name = POM_LICENCE_NAME
                                        url = POM_LICENCE_URL
                                        distribution = POM_LICENCE_DIST
                                    }
                                }
                                developers {
                                    developer {
                                        id = "libGDX Developers"
                                        url = "https://github.com/libgdx/libgdx/graphs/contributors"
                                    }
                                }
                                scm {
                                    connection = POM_SCM_CONNECTION
                                    developerConnection = POM_SCM_DEV_CONNECTION
                                    url = POM_SCM_URL
                                }
                            }
                        }
                    }
                }

                repositories {
                    maven {
                        url = version.endsWith('SNAPSHOT')
                                ? getSnapshotRepositoryUrl()
                                : rootProject.layout.buildDirectory.dir('staging-deploy')
                        if (version.endsWith('SNAPSHOT') && (getRepositoryUsername() || getRepositoryPassword())) {
                            credentials {
                                username = getRepositoryUsername()
                                password = getRepositoryPassword()
                            }
                        }
                    }
                }
            }

            signing {
                useGpgCmd()
                if (publishing.publications.findByName("mavenJava")) {
                    sign publishing.publications.mavenJava
                }
                if (project.tasks.findByName('jnigen') &&
                    publishing.publications.findByName("mavenPlatform")) {
                    sign publishing.publications.mavenPlatform
                }
            }

            gradle.taskGraph.whenReady {
                tasks.withType(Sign) {
                    onlyIf { isReleaseBuild() }
                }
            }
        }
    }
}

tasks.register('setupExternalNativesDirs') {
	doLast {
		file("build").mkdir();
		file("extensions/gdx-lwjgl3-angle/res").mkdirs();
	}
	doNotTrackState("Don't track state")
}

tasks.register('fetchAngleNativesZIP', Download) {
	dependsOn setupExternalNativesDirs
	src 'https://raw.githubusercontent.com/libgdx/gdx-angle-natives/master/gdx-angle-natives.zip'
	dest 'build/gdx-angle-natives.zip'
	onlyIfModified true
	useETag "all"
}

tasks.register('fetchExternalNatives', Copy) {
	dependsOn fetchAngleNativesZIP
	from zipTree("build/gdx-angle-natives.zip")
	into "./extensions/gdx-lwjgl3-angle/res"
	doNotTrackState("Don't track state")
}

tasks.register('fetchGdxNativesZIP', Download) {
	dependsOn fetchExternalNatives
	src "https://libgdx-nightlies.s3.eu-central-1.amazonaws.com/libgdx-nightlies/natives.zip"
	dest "build/natives.zip"
	onlyIfModified true
	useETag "all"
}

tasks.register('fetchNatives', Copy) {
	dependsOn fetchGdxNativesZIP
	from zipTree("build/natives.zip")
	into "."
	doNotTrackState("Don't track state")
}

if (!project.hasProperty("skipPublishGradle")) {
  apply from: rootProject.file('publish.gradle')
}

if(rootProject.file('override.gradle').exists())
	apply from: rootProject.file('override.gradle')

if (!project.hasProperty("skipPublishGradle")) {
  apply from: rootProject.file('publish.gradle')
}
